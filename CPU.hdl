// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=aInst);         // A instruction
    Not(in=aInst, out=cInst);                   // C instruction
    And(a=cInst, b=instruction[5], out=aluSel); // ALU A reg. selector

    Mux16(a=instruction, b=aluOut, sel=aluSel, out=AmuxOut);
    // A Mux, taking instruction and ALU output, output to A register

    Or(a=aInst, b=aluSel, out=loadA);
    ARegister(in=AmuxOut, load=loadA, out=ARegOut, out[0..14]=addressM); 
    // A register takes A Mux in, d1 selector, output to Mux, addresss M (to data memory), PC

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AorMout); 
    // ALU Mux, taking A and M (inM) and outpout A/M to ALU, 'a' selector

    And(a=cInst, b=instruction[4], out=loadD); 
    DRegister(in=aluOut, load=loadD, out=Dout); 
    // D register takes in ALU output, d2 selector, output to ALU

    ALU(x=Dout, y=AorMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], ng=neg, zr=zero, out=outM, out=aluOut); 
    // taking A/M and D, output back to A Mux, outM (to data memory) and D, zx,nx,zy,ny,f,no selector, ng,zr out

    // Write to memory, d3 (M)
    And(a=instruction[3], b=cInst, out=writeM);

    // Jump condition
    Or(a=neg, b=zero, out=lte);             // jump <= 0
    Not(in=lte, out=gt);                    // jump > 0
    And(a=instruction[1], b=zero, out=jeq); // JEQ
    And(a=instruction[2], b=neg, out=jlt);  // JLT
    And(a=instruction[0], b=gt, out=jgt);   // JGT
    Or(a=jlt, b=jeq, out=jle);              // JLE
    Or(a=jle, b=jgt, out=jmp);              // JMP

    And(a=cInst, b=jmp, out=jump);          // check for C inst. to jump
    Not(in=jump, out=incPc);                // if no jump, then increment
    PC(in=ARegOut, load=jump, inc=incPc, reset=reset, out[0..14]=pc); 
    // taking reset and A reg output, PC load bit in, pc out (to instruction memory)
}