// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   /* Original setup:
   *  // zero x
   *  Mux16(a=x, b=false, sel=zx, out=muxOutx);
   * 
   *  // zero y
   *  Mux16(a=y, b=false, sel=zy, out=muxOuty);
   * 
   *  // negate x
   *  Not16(in=muxOutx, out=notX);
   *  Mux16(a=muxOutx, b=notX, sel=nx, out=negateX);
   * 
   *  // negate y
   *  Not16(in=muxOuty, out=notY);
   *  Mux16(a=muxOuty, b=notY, sel=ny, out=negateY);
   */

   // Finally got these Mux4Way16s to work. Had the selectors ordered backwards.
   // zx, nx in a Mux4Way16
   Not16(in=x, out=notX);
   Mux4Way16(a=x, b=notX, c=false, d=true, sel[1]=zx, sel[0]=nx, out=outMuxX);
  
   // zy, ny in a Mux4Way16
   Not16(in=y, out=notY);
   Mux4Way16(a=y, b=notY, c=false, d=true, sel[1]=zy, sel[0]=ny, out=outMuxY);

   // choose x+y or x&y (function code)
   And16(a=outMuxX, b=outMuxY, out=xandy);
   Add16(a=outMuxX, b=outMuxY, out=xplusy);
   Mux16(a=xandy, b=xplusy, sel=f, out=func);

   // negate/not out (no) output and check if negative (ng)
   Not16(in=func, out=notFunc);
   Mux16(a=func, b=notFunc, sel=no, out[0..7]=out7, out[8..15]=out15, out[15]=ng, out=out);

   // check if zero
   Or8Way(in=out7, out=orOut1);
   Or8Way(in=out15, out=orOut2);
   Or(a=orOut1, b=orOut2, out=orOut);
   Not(in=orOut, out=zr);
}